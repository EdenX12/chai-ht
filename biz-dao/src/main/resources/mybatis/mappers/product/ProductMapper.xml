<?xml version="1.0" encoding="UTF-8"?>
<!DOCTYPE mapper PUBLIC "-//mybatis.org//DTD Mapper 3.0//EN" "http://mybatis.org/dtd/mybatis-3-mapper.dtd">
<mapper namespace="com.tian.sakura.cdd.db.dao.product.ProductMapper">
    <resultMap id="BaseResultMap" type="com.tian.sakura.cdd.db.domain.product.Product">
        <!--
          WARNING - @mbg.generated
          This element is automatically generated by MyBatis Generator, do not modify.
        -->
        <id column="id" jdbcType="VARCHAR" property="id"/>
        <result column="shop_id" jdbcType="VARCHAR" property="shopId"/>
        <result column="type_id" jdbcType="VARCHAR" property="typeId"/>
        <result column="type2_id" jdbcType="VARCHAR" property="type2Id"/>
        <result column="product_name" jdbcType="VARCHAR" property="productName"/>
        <result column="product_img" jdbcType="VARCHAR" property="productImg"/>
        <result column="product_des" jdbcType="VARCHAR" property="productDes"/>
        <result column="create_time" jdbcType="TIMESTAMP" property="createTime"/>
        <result column="create_user" jdbcType="INTEGER" property="createUser"/>
        <result column="update_time" jdbcType="TIMESTAMP" property="updateTime"/>
        <result column="update_user" jdbcType="INTEGER" property="updateUser"/>
        <result column="product_status" jdbcType="INTEGER" property="productStatus"/>
        <result column="task_number" jdbcType="INTEGER" property="taskNumber"/>
        <result column="product_price" jdbcType="DECIMAL" property="productPrice"/>
        <result column="total_reward" jdbcType="DECIMAL" property="totalReward"/>
        <result column="task_price" jdbcType="DECIMAL" property="taskPrice"/>
        <result column="product_type" jdbcType="INTEGER" property="productType"/>
        <result column="delivery_type" jdbcType="INTEGER" property="deliveryType"/>
        <result column="discount_rate" jdbcType="DECIMAL" property="discountRate"/>
        <result column="start_date" jdbcType="TIMESTAMP" property="startDate"/>
        <result column="express_fee" jdbcType="DECIMAL" property="expressFee"/>
        <result column="scribing_price" jdbcType="DECIMAL" property="scribingPrice"/>
        <result column="stock_number" jdbcType="INTEGER" property="stockNumber"/>
        <result column="delete_flag" jdbcType="INTEGER" property="deleteFlag"/>
    </resultMap>
    <resultMap extends="BaseResultMap" id="ResultMapWithBLOBs" type="com.tian.sakura.cdd.db.domain.product.Product">
        <!--
          WARNING - @mbg.generated
          This element is automatically generated by MyBatis Generator, do not modify.
        -->
        <result column="product_detail" jdbcType="LONGVARCHAR" property="productDetail"/>
    </resultMap>
    <sql id="Base_Column_List">
        <!--
          WARNING - @mbg.generated
          This element is automatically generated by MyBatis Generator, do not modify.
        -->
        id,shop_id, type_id, product_name, product_img, product_des, create_time, create_user, update_time,
        update_user, product_status, total_number, task_number, product_price, total_reward, task_price,product_type,
        delivery_type,discount_rate,start_date,type2_id,express_fee,scribing_price,stock_number,delete_flag
    </sql>
    <sql id="Blob_Column_List">
        <!--
          WARNING - @mbg.generated
          This element is automatically generated by MyBatis Generator, do not modify.
        -->
        product_detail
    </sql>
    <select id="selectByPrimaryKey" parameterType="java.lang.String" resultMap="ResultMapWithBLOBs">
        <!--
          WARNING - @mbg.generated
          This element is automatically generated by MyBatis Generator, do not modify.
        -->
        select
        <include refid="Base_Column_List"/>
        ,
        <include refid="Blob_Column_List"/>
        from s_product
        where id = #{id,jdbcType=VARCHAR}
    </select>
    <delete id="deleteByPrimaryKey" parameterType="java.lang.String">
        <!--
          WARNING - @mbg.generated
          This element is automatically generated by MyBatis Generator, do not modify.
        -->
        delete from s_product
        where id = #{id}
    </delete>
    <insert id="insert" parameterType="com.tian.sakura.cdd.db.domain.product.Product">
        <!--
          WARNING - @mbg.generated
          This element is automatically generated by MyBatis Generator, do not modify.
        -->
        insert into s_product (id, type_id, product_name,
        product_img, product_des, create_time,
        create_user, update_time, update_user,
        product_status, task_number, product_price,
        total_reward, task_price, product_type,product_detail,
        delivery_type,discount_rate,start_date,type2_id,express_fee,scribing_price,stock_number,
        shop_id)
        values (#{id,jdbcType=INTEGER}, #{typeId,jdbcType=VARCHAR}, #{productName,jdbcType=VARCHAR},
        #{productImg,jdbcType=VARCHAR}, #{productDes,jdbcType=VARCHAR}, #{createTime,jdbcType=TIMESTAMP},
        #{createUser,jdbcType=INTEGER}, #{updateTime,jdbcType=TIMESTAMP}, #{updateUser,jdbcType=INTEGER},
        #{productStatus,jdbcType=INTEGER}, #{taskNumber,jdbcType=INTEGER}, #{productPrice,jdbcType=DECIMAL},
        #{totalReward,jdbcType=DECIMAL}, #{taskPrice,jdbcType=DECIMAL},
         #{productType,jdbcType=INTEGER},#{productDetail,jdbcType=LONGVARCHAR},
         #{deliveryType,jdbcType=INTEGER}, #{discountRate,jdbcType=DECIMAL},#{startDate,jdbcType=TIMESTAMP},
         #{type2Id,jdbcType=VARCHAR},#{expressFee,jdbcType=DECIMAL},#{scribingPrice,jdbcType=DECIMAL},
         #{stockNumber,jdbcType=INTEGER},#{shopId,jdbcType=VARCHAR})
    </insert>
    <insert id="insertSelective" useGeneratedKeys="true" keyProperty="id" parameterType="com.tian.sakura.cdd.db.domain.product.Product">
        <!--
          WARNING - @mbg.generated
          This element is automatically generated by MyBatis Generator, do not modify.
        -->
        insert into s_product
        <trim prefix="(" suffix=")" suffixOverrides=",">
            <if test="id != null">
                id,
            </if>
            <if test="shopId != null and shopId != ''">
                shop_id,
            </if>
            <if test="typeId != null">
                type_id,
            </if>
            <if test="productName != null">
                product_name,
            </if>
            <if test="productImg != null">
                product_img,
            </if>
            <if test="productDes != null">
                product_des,
            </if>
            <if test="createTime != null">
                create_time,
            </if>
            <if test="createUser != null">
                create_user,
            </if>
            <if test="updateTime != null">
                update_time,
            </if>
            <if test="updateUser != null">
                update_user,
            </if>
            <if test="productStatus != null">
                product_status,
            </if>
            <if test="taskNumber != null">
                task_number,
            </if>
            <if test="productPrice != null">
                product_price,
            </if>
            <if test="totalReward != null">
                total_reward,
            </if>
            <if test="taskPrice != null">
                task_price,
            </if>
            <if test="productType != null">
                product_type,
            </if>
            <if test="productDetail != null">
                product_detail,
            </if>
              <if test="deliveryType != null">
              delivery_Type,
              </if>
            <if test="discountRate != null"> 
			   discount_Rate,
			</if>
			<if test="startDate != null">
			  start_Date,  
			</if>          
            
            <if test="type2Id != null">
                type2_id,
            </if>
            <if test="expressFee != null">
                express_fee,
            </if>
            <if test="scribingPrice != null">
                scribing_price,
            </if>
            <if test="stockNumber != null">
                stock_number,
            </if>
            <if test="costPrice != null">
                cost_price,
            </if>
            <if test="totalNumber != null">
                total_number,
            </if>
        </trim>
        <trim prefix="values (" suffix=")" suffixOverrides=",">
            <if test="id != null">
                #{id,jdbcType=INTEGER},
            </if>
            <if test="shopId != null and shopId != ''">
                #{shopId},
            </if>
            <if test="typeId != null">
                #{typeId,jdbcType=INTEGER},
            </if>
            <if test="productName != null">
                #{productName,jdbcType=VARCHAR},
            </if>
            <if test="productImg != null">
                #{productImg,jdbcType=VARCHAR},
            </if>
            <if test="productDes != null">
                #{productDes,jdbcType=VARCHAR},
            </if>
            <if test="createTime != null">
                #{createTime,jdbcType=TIMESTAMP},
            </if>
            <if test="createUser != null">
                #{createUser,jdbcType=INTEGER},
            </if>
            <if test="updateTime != null">
                #{updateTime,jdbcType=TIMESTAMP},
            </if>
            <if test="updateUser != null">
                #{updateUser,jdbcType=INTEGER},
            </if>
            <if test="productStatus != null">
                #{productStatus,jdbcType=INTEGER},
            </if>
            <if test="taskNumber != null">
                #{taskNumber,jdbcType=INTEGER},
            </if>
            <if test="productPrice != null">
                #{productPrice,jdbcType=DECIMAL},
            </if>
            <if test="totalReward != null">
                #{totalReward,jdbcType=DECIMAL},
            </if>
            <if test="taskPrice != null">
                #{taskPrice,jdbcType=DECIMAL},
            </if>
            <if test="priceUnit != null">
                #{priceUnit,jdbcType=VARCHAR},
            </if>

            <if test="productType != null">
                #{productType,jdbcType=INTEGER},
            </if>
            <if test="productDetail != null">
                #{productDetail,jdbcType=LONGVARCHAR},
            </if>
            <if test="deliveryType != null">
			   #{deliveryType,jdbcType=INTEGER},
			</if>
			<if test="discountRate != null"> 
			   #{discountRate,jdbcType=DECIMAL},
			</if>
			<if test="startDate != null">
			  #{startDate,jdbcType=TIMESTAMP},  
			</if>          
			<if test="type2Id != null">
			  #{type2Id,jdbcType=VARCHAR},  
			</if>
            <if test="expressFee != null">
                #{expressFee,jdbcType=DECIMAL},
            </if>
            <if test="scribingPrice != null">
                #{scribingPrice,jdbcType=DECIMAL},
            </if>
            <if test="stockNumber != null">
                #{stockNumber,jdbcType=INTEGER}
            </if>
            <if test="costPrice != null">
                #{costPrice},
            </if>
            <if test="totalNumber != null">
                #{totalNumber},
            </if>
        </trim>
    </insert>
    <update id="updateByPrimaryKeySelective" parameterType="com.tian.sakura.cdd.db.domain.product.Product">
        <!--
          WARNING - @mbg.generated
          This element is automatically generated by MyBatis Generator, do not modify.
        -->
        update s_product
        <set>
            <if test="typeId != null">
                type_id = #{typeId,jdbcType=INTEGER},
            </if>
            <if test="shopId != null and shopId != ''">
                shop_id = #{shopId},
            </if>
            <if test="productName != null">
                product_name = #{productName,jdbcType=VARCHAR},
            </if>
            <if test="productImg != null">
                product_img = #{productImg,jdbcType=VARCHAR},
            </if>
            <if test="productDes != null">
                product_des = #{productDes,jdbcType=VARCHAR},
            </if>
            <if test="createTime != null">
                create_time = #{createTime,jdbcType=TIMESTAMP},
            </if>
            <if test="createUser != null">
                create_user = #{createUser,jdbcType=INTEGER},
            </if>
            <if test="updateTime != null">
                update_time = #{updateTime,jdbcType=TIMESTAMP},
            </if>
            <if test="updateUser != null">
                update_user = #{updateUser,jdbcType=INTEGER},
            </if>
            <if test="productStatus != null">
                product_status = #{productStatus,jdbcType=INTEGER},
            </if>
            <if test="taskNumber != null">
                task_number = #{taskNumber,jdbcType=INTEGER},
            </if>
            <if test="productPrice != null">
                product_price = #{productPrice,jdbcType=DECIMAL},
            </if>
            <if test="totalReward != null">
                total_reward = #{totalReward,jdbcType=DECIMAL},
            </if>
            <if test="taskPrice != null">
                task_price = #{taskPrice,jdbcType=DECIMAL},
            </if>
            <if test="productType != null">
                product_type = #{productType,jdbcType=INTEGER},
            </if>
            <if test="productDetail != null">
                product_detail = #{productDetail,jdbcType=LONGVARCHAR},
            </if>
             <if test="deliveryType != null">
			    delivery_type = #{deliveryType,jdbcType=INTEGER},
			</if>
			<if test="discountRate != null"> 
			   discount_rate = #{discountRate,jdbcType=DECIMAL},
			</if>
			<if test="startDate != null">
			  start_date = #{startDate,jdbcType=TIMESTAMP},  
			</if>        
			<if test="type2Id != null">
			  type2_id = #{type2Id,jdbcType=VARCHAR} , 
			</if>        
			<if test="expressFee != null">
                express_fee = #{expressFee,jdbcType=DECIMAL},
            </if>
            <if test="scribingPrice != null">
                scribing_Price = #{scribingPrice,jdbcType=DECIMAL},
            </if>
            <if test="stockNumber != null">
                stock_number = #{stockNumber,jdbcType=INTEGER},
            </if>
            
            <if test="deleteFlag != null">
                delete_flag = #{deleteFlag,jdbcType=INTEGER},
            </if>
            <if test="costPrice != null">
                cost_price = #{costPrice},
            </if>
            <if test="totalNumber != null">
                total_number = #{totalNumber},
            </if>
        </set>
        where id = #{id,jdbcType=INTEGER}
    </update>
    <update id="updateByPrimaryKeyWithBLOBs" parameterType="com.tian.sakura.cdd.db.domain.product.Product">
        <!--
          WARNING - @mbg.generated
          This element is automatically generated by MyBatis Generator, do not modify.
        -->
        update s_product
        set type_id = #{typeId,jdbcType=VARCHAR},
        product_name = #{productName,jdbcType=VARCHAR},
        product_img = #{productImg,jdbcType=VARCHAR},
        product_des = #{productDes,jdbcType=VARCHAR},
        create_time = #{createTime,jdbcType=TIMESTAMP},
        create_user = #{createUser,jdbcType=INTEGER},
        update_time = #{updateTime,jdbcType=TIMESTAMP},
        update_user = #{updateUser,jdbcType=INTEGER},
        product_status = #{productStatus,jdbcType=INTEGER},
        task_number = #{taskNumber,jdbcType=INTEGER},
        product_price = #{productPrice,jdbcType=DECIMAL},
        total_reward = #{totalReward,jdbcType=DECIMAL},
        task_price = #{taskPrice,jdbcType=DECIMAL},
        product_type = #{productType,jdbcType=INTEGER},
        product_detail = #{productDetail,jdbcType=LONGVARCHAR},
        delivery_type = #{deliveryType,jdbcType=INTEGER},
        discount_rate = #{discountRate,jdbcType=DECIMAL},
        start_date = #{startDate,jdbcType=TIMESTAMP},
        type2_id = #{typeId,jdbcType=VARCHAR},
        express_fee = #{expressFee,jdbcType=DECIMAL},
        scribing_Price = #{scribingPrice,jdbcType=DECIMAL},
        stock_number = #{stockNumber,jdbcType=INTEGER}
        where id = #{id,jdbcType=INTEGER}
    </update>
    <update id="updateByPrimaryKey" parameterType="com.tian.sakura.cdd.db.domain.product.Product">
        <!--
          WARNING - @mbg.generated
          This element is automatically generated by MyBatis Generator, do not modify.
        -->
        update s_product
        set type_id = #{typeId,jdbcType=INTEGER},
        product_name = #{productName,jdbcType=VARCHAR},
        product_img = #{productImg,jdbcType=VARCHAR},
        product_des = #{productDes,jdbcType=VARCHAR},
        create_time = #{createTime,jdbcType=TIMESTAMP},
        create_user = #{createUser,jdbcType=INTEGER},
        update_time = #{updateTime,jdbcType=TIMESTAMP},
        update_user = #{updateUser,jdbcType=INTEGER},
        product_status = #{productStatus,jdbcType=INTEGER},
        task_number = #{taskNumber,jdbcType=INTEGER},
        product_price = #{productPrice,jdbcType=DECIMAL},
        total_reward = #{totalReward,jdbcType=DECIMAL},
        task_price = #{taskPrice,jdbcType=DECIMAL},
        product_type = #{productType,jdbcType=INTEGER},
        delivery_type = #{deliveryType,jdbcType=INTEGER},
        discount_rate = #{discountRate,jdbcType=DECIMAL},
        start_date = #{startDate,jdbcType=TIMESTAMP},
        type2_id = #{typeId,jdbcType=VARCHAR},
        express_fee = #{expressFee,jdbcType=DECIMAL},
        scribing_Price = #{scribingPrice,jdbcType=DECIMAL},
        stock_number = #{stockNumber,jdbcType=INTEGER}
        
        where id = #{id,jdbcType=INTEGER}
    </update>
    <update id="updateTotalNumber">
        update s_product set total_number = total_number + #{productLine},
        stock_number = stock_number + #{productLine}
        where id = #{productId}
    </update>
    <select id="getProductList" resultMap="BaseResultMap"
            parameterType="com.tian.sakura.cdd.db.manage.product.vo.ProductQueryVo">
        SELECT
        a.id ,
        a.type_id ,
        a.product_name,
        a.product_img,
        a.product_des,
        a.task_number,
        a.product_price,
        a.total_reward,
        a.task_price

        FROM
        s_product a
        WHERE  1=1
        <if test="productTypeId != null and productTypeId != ''">
            and type_id = #{productTypeId}
        </if>
        <if test="productType2Id != null and productType2Id != ''">
            and type2_id = #{productType2Id}
        </if>
        <if test="productName !=null and productName != ''">
            and product_name like concat('%', #{productName}, '%')
        </if>
            and product_status = 1
        <choose>
            <when test="sortType == 0">
                order by create_time
                <choose>
                    <when test="sortDirect == 0"> asc </when>
                    <when test="sortDirect == 1">desc </when>
                </choose>
            </when>
            <when test="sortType == 1">
                order by stock_number
                <choose>
                    <when test="sortDirect == 0"> asc </when>
                    <when test="sortDirect == 1">desc </when>
                </choose>
            </when>

            <when test="sortType == 2">
                order by product_price
                <choose>
                    <when test="sortDirect == 0"> asc </when>
                    <when test="sortDirect == 1">desc </when>
                </choose>
            </when>
        </choose>

    </select>
    <select id="queryProductList" resultType="com.tian.sakura.cdd.db.domain.product.Product">
        select a.*,b.shop_name as shopName from s_product a left join s_shop b on a.shop_id = b.id
        <where>
            1=1
            <if test="product.shopId != null and product.shopId != ''">
                and a.shop_id = #{product.shopId}
            </if>
            <if test="product.productName !=null and product.productName != ''">
                and a.product_name like concat('%', #{product.productName}, '%')
            </if>
            <if test="product.productStatus !=null">
                and a.product_status = #{product.productStatus}
            </if>
            <if test="product.productType !=null">
                and a.product_type = #{product.productType}
            </if>
            <if test="product.typeId != null">
                and a.type_id = #{product.typeId}
            </if>
        </where>
        order by a.create_time desc
    </select>


    <select id="selectRecommendPrdList" resultMap="BaseResultMap"
            parameterType="com.tian.sakura.cdd.db.manage.product.vo.ProductRecommendQueryVo">
        select
        c.page_style, c.recommend_title ,
        a.id , a.type_id, a.product_name, a.product_img, a.product_des,
        a.task_number, a.product_price, a.total_reward, a.task_price
        from s_product a, s_product_recommend b , s_recommend_type c

        where
         a.id = b.product_id
        and c.id = b.recommend_type_id
        and product_status = 1
        <if test="recommendTypeId != null and recommendTypeId != ''">
            AND c.id = #{recommendTypeId}
        </if>
        <if test="productTypeId != null and productTypeId != ''">
            AND a.type_id = #{productTypeId}
        </if>
        and c.recommend_status = 1
        order by a.id

    </select>
    <select id="listUsableProduct" resultType="com.tian.sakura.cdd.db.domain.product.Product">
        select id,product_name from s_product
        where 1=1
        <if test="productName != null and productName">
            and product_name like concat('%', #{productName}, '%')
        </if>
    </select>
    
    <select id="getUserProducts" resultType="com.tian.sakura.cdd.db.domain.product.Product"
      parameterType="com.tian.sakura.cdd.db.manage.mytask.vo.MyTaskQueryVo">
        select b.*
        from s_user_task a,
             s_product b
        where a.product_id = b.id
             and a.user_id = #{userId}
    </select>
	<!-- 关注中的我的任务   -->
    <select id="getUserFollow" resultType="com.tian.sakura.cdd.db.domain.product.Product"
      parameterType="com.tian.sakura.cdd.db.manage.mytask.vo.MyTaskQueryVo">
        select b.*
        from s_user_follow a,
             s_product b
        where a.product_id = b.id
             and a.user_id = #{userId}
             and a.status=1
    </select>
     <!--  进行中的最新一条任务  -->
    <select id="myTasking" resultType="com.tian.sakura.cdd.db.domain.product.Product"
      parameterType="string">
        select b.*
        from s_user_task_line a,
             s_product b,
             s_task_line c
        where a.product_id = b.id
             and a.user_id = #{userId}
             and a.product_id = #{productId}
             and (a.status =0 or a.status =1 )
             and a.pay_status = 1
             and a.task_line_id = c.id
             and c.settle_status = 0
             order by a.create_time
             limit 1
    </select>

     <!--  进行中的战队任务  -->
    <select id="teamTasking" resultType="com.tian.sakura.cdd.db.domain.task.MyTask"
      parameterType="string">
        select b.*,c.nick_name as nickName,c.user_name as userName
        from s_user_task_line a,
             s_product b,
             s_user c
        where a.product_id = b.id
             and a.user_id = #{userId}
             and a.status = '0'
             and a.user_id = c.id
    </select>
    <!--  进行中的队长推荐  -->
    <select id="teamLeaderPrompting" resultType="com.tian.sakura.cdd.db.domain.task.MyTask"
      parameterType="com.tian.sakura.cdd.db.manage.mytask.vo.MyTaskQueryVo">
        select b.*,c.nick_name as nickName,c.user_name as userName
        from s_user_task_line a,
             s_product b,
             s_user c
        where a.product_id = b.id
             and a.user_id = #{userId}
             and a.status = '0'
             and a.user_id = c.id
    </select>
    
         <!--  结算中的最新一条任务  -->
    <select id="myLatestSettleTaskLine" resultType="com.tian.sakura.cdd.db.manage.product.vo.MyTaskProductVo"
      parameterType="string">
        select b.*,a.task_line_id,a.user_id
        from s_user_task_line a,
             s_product b,
             s_task_line c
        where a.product_id = b.id
             and a.user_id = #{userId}
             and a.product_id = #{productId}
             and c.settle_status = 1
             and a.task_line_id = c.id
             order by a.create_time
             limit 1
    </select>
    
    
    <!--  结算中的我的任务  -->
    <select id="mySettleTask" resultType="com.tian.sakura.cdd.db.manage.product.vo.MyTaskProductVo"
      parameterType="com.tian.sakura.cdd.db.manage.mytask.vo.MyTaskQueryVo">
        select distinct *
        from
        (
        select b.*,a.task_line_id,a.user_id
        from s_user_task_line a,
             s_product b,
             s_task_line c
        where a.product_id = b.id
             and a.user_id = #{userId}
             and a.task_line_id = c.id
             and c.settle_status = 1
        ) m
    </select>
    <!--  店铺商品  -->
    <select id="getShopProductList" resultType="com.tian.sakura.cdd.db.manage.product.vo.ShopProductVo">
        select id as productId,
               product_name as productName,
               stock_number as stockQuantity,
               product_status as productStatus,
               product_price as productPrice,
               scribing_price as scribingPrice,
               product_img as productImg,
               0 as saleQuantity
        from s_product
        where shop_id=#{shopId}
              and delete_flag = 0
              and product_status =#{productStatus}
              order by create_time desc
    </select>
    <!--  店铺商品 库存数量 -->
    <select id="getShopProductCnt" resultType="int">
        select sum(b.stock_number)
        from s_product a,
             s_product_spec b
        where a.shop_id=#{shopId}
              and a.delete_flag = 0
              and (a.product_status = 1 or a.product_status = 2)
              and  a.id = b.product_id
    </select>

	<!--  店铺商品关注人数 -->
    <select id="getShopProductFollwCnt" resultType="int">
        select sum(b.cnt)
        from s_product a,
             s_product_review_stat b
        where a.shop_id=#{shopId}
              and a.delete_flag = 0
              and  a.id = b.product_id
    </select>
    <!--  店铺正常/新品商品  -->
    <select id="getShopNormalProduct"  parameterType="com.tian.sakura.cdd.db.manage.product.vo.ShopGroupProductVo"
       resultType="com.tian.sakura.cdd.db.domain.product.Product">
        select *
        from s_product
        where shop_id=#{shopId}
              and delete_flag = 0
              and ( product_status = 1 or product_status = 2 )
              and product_type = #{productType}
    </select>
    <!--  查询组内商品  -->
    <select id="getGroupProduct" parameterType="com.tian.sakura.cdd.db.manage.product.vo.ShopGroupProductVo"
           resultType="com.tian.sakura.cdd.db.domain.product.Product">
        select a.*
        from s_product a,
             s_product_group b
        where a.shop_id=#{shopId}
              and a.delete_flag = 0
              and ( a.product_status = 1 or a.product_status = 2 )
              and a.id = b.product_id
              and b.group_id = #{groupId}
    </select>
    
        <!--  店铺上架商品数量 -->
    <select id="getShopProductOnCnt" resultType="int">
        select count(*)
        from s_product 
        where shop_id=#{shopId}
              and delete_flag = 0
              and (product_status = 1 or product_status = 2)
    </select>

	<!--  店铺被关注的商品 -->
    <select id="getShopProductBeFollowedCnt" resultType="int">
        select count(a.id)
        from s_product a,
             s_product_review_stat b
        where a.shop_id=#{shopId}
              and a.delete_flag = 0
              and  a.id = b.product_id
    </select>
        <!--  店铺商品模糊查询  -->
    <select id="searchShopProduct"  parameterType="com.tian.sakura.cdd.db.manage.product.vo.ShopGroupProductVo"
       resultType="com.tian.sakura.cdd.db.domain.product.Product">
        select *
        from s_product
        where shop_id=#{shopId}
              and delete_flag = 0
              and product_name like concat('%', #{productName}, '%')
         order by create_time desc
    </select>
    
    <!--  推荐商铺 -->
    <select id="shopRecommendPrd" resultType="com.tian.sakura.cdd.db.manage.product.vo.ShopRecommendPrd">
    select c.id shop_id,c.shop_name,c.shop_logo,a.id product_id,a.product_img,
           a.product_price,a.scribing_price
	from s_product a,
    	 s_product_recommend b,
     	s_shop c
	where 
    	c.id = #{shopId}
    	and b.shop_id = #{shopId}
    	and a.shop_id = #{shopId}
    	and a.id = b.product_id
    </select>
    
</mapper>