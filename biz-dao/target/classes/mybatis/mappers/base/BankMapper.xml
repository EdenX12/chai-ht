<?xml version="1.0" encoding="UTF-8"?>
<!DOCTYPE mapper PUBLIC "-//mybatis.org//DTD Mapper 3.0//EN" "http://mybatis.org/dtd/mybatis-3-mapper.dtd">
<mapper namespace="com.tian.sakura.cdd.db.dao.base.BankMapper">
  <resultMap id="BaseResultMap" type="com.tian.sakura.cdd.db.domain.base.Bank">
    <!--
      WARNING - @mbg.generated
      This element is automatically generated by MyBatis Generator, do not modify.
    -->
    <id column="id" jdbcType="INTEGER" property="id" />
    <result column="bank_name" jdbcType="VARCHAR" property="bankName" />
    <result column="bank_code" jdbcType="VARCHAR" property="bankCode" />
    <result column="status" jdbcType="INTEGER" property="status" />
    <result column="bank_icon" jdbcType="VARCHAR" property="bankIcon" />
  </resultMap>
  <sql id="Base_Column_List">
    <!--
      WARNING - @mbg.generated
      This element is automatically generated by MyBatis Generator, do not modify.
    -->
    id, bank_name, bank_code, status, bank_icon
  </sql>
  <select id="selectByPrimaryKey" parameterType="java.lang.Integer" resultMap="BaseResultMap">
    <!--
      WARNING - @mbg.generated
      This element is automatically generated by MyBatis Generator, do not modify.
    -->
    select 
    <include refid="Base_Column_List" />
    from s_bank
    where id = #{id,jdbcType=INTEGER}
  </select>
  <delete id="deleteByPrimaryKey" parameterType="java.lang.Integer">
    <!--
      WARNING - @mbg.generated
      This element is automatically generated by MyBatis Generator, do not modify.
    -->
    delete from s_bank
    where id = #{id,jdbcType=INTEGER}
  </delete>
  <insert id="insert" parameterType="com.tian.sakura.cdd.db.domain.base.Bank">
    <!--
      WARNING - @mbg.generated
      This element is automatically generated by MyBatis Generator, do not modify.
    -->
    insert into s_bank (id, bank_name, bank_code, 
      status, bank_icon)
    values (#{id,jdbcType=INTEGER}, #{bankName,jdbcType=VARCHAR}, #{bankCode,jdbcType=VARCHAR}, 
      #{status,jdbcType=INTEGER}, #{bankIcon,jdbcType=VARCHAR})
  </insert>
  <insert id="insertSelective" parameterType="com.tian.sakura.cdd.db.domain.base.Bank">
    <!--
      WARNING - @mbg.generated
      This element is automatically generated by MyBatis Generator, do not modify.
    -->
    insert into s_bank
    <trim prefix="(" suffix=")" suffixOverrides=",">
      <if test="id != null">
        id,
      </if>
      <if test="bankName != null">
        bank_name,
      </if>
      <if test="bankCode != null">
        bank_code,
      </if>
      <if test="status != null">
        status,
      </if>
      <if test="bankIcon != null">
        bank_icon,
      </if>
    </trim>
    <trim prefix="values (" suffix=")" suffixOverrides=",">
      <if test="id != null">
        #{id,jdbcType=INTEGER},
      </if>
      <if test="bankName != null">
        #{bankName,jdbcType=VARCHAR},
      </if>
      <if test="bankCode != null">
        #{bankCode,jdbcType=VARCHAR},
      </if>
      <if test="status != null">
        #{status,jdbcType=INTEGER},
      </if>
      <if test="bankIcon != null">
        #{bankIcon,jdbcType=VARCHAR},
      </if>
    </trim>
  </insert>
  <update id="updateByPrimaryKeySelective" parameterType="com.tian.sakura.cdd.db.domain.base.Bank">
    <!--
      WARNING - @mbg.generated
      This element is automatically generated by MyBatis Generator, do not modify.
    -->
    update s_bank
    <set>
      <if test="bankName != null">
        bank_name = #{bankName,jdbcType=VARCHAR},
      </if>
      <if test="bankCode != null">
        bank_code = #{bankCode,jdbcType=VARCHAR},
      </if>
      <if test="status != null">
        status = #{status,jdbcType=INTEGER},
      </if>
      <if test="bankIcon != null">
        bank_icon = #{bankIcon,jdbcType=VARCHAR},
      </if>
    </set>
    where id = #{id,jdbcType=INTEGER}
  </update>
  <update id="updateByPrimaryKey" parameterType="com.tian.sakura.cdd.db.domain.base.Bank">
    <!--
      WARNING - @mbg.generated
      This element is automatically generated by MyBatis Generator, do not modify.
    -->
    update s_bank
    set bank_name = #{bankName,jdbcType=VARCHAR},
      bank_code = #{bankCode,jdbcType=VARCHAR},
      status = #{status,jdbcType=INTEGER},
      bank_icon = #{bankIcon,jdbcType=VARCHAR}
    where id = #{id,jdbcType=INTEGER}
  </update>

  <select id="findLikeBankName" resultMap="BaseResultMap">
    select id, bank_code, bank_name from s_bank <where>
    <if test="bankName != null and bankName != ''">
      and bank_name like #{bankName}
    </if>

  </where>



  </select>
</mapper>