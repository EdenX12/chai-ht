<?xml version="1.0" encoding="UTF-8"?>
<!DOCTYPE mapper PUBLIC "-//mybatis.org//DTD Mapper 3.0//EN" "http://mybatis.org/dtd/mybatis-3-mapper.dtd">
<mapper namespace="com.tian.sakura.cdd.db.dao.userTaskLine.UserTaskLineMapper">
  <resultMap id="BaseResultMap" type="com.tian.sakura.cdd.db.domain.userTaskLine.UserTaskLine">
    <!--
      WARNING - @mbg.generated
      This element is automatically generated by MyBatis Generator, do not modify.
    -->
    <id column="id" jdbcType="VARCHAR" property="id" />
    <result column="user_id" jdbcType="VARCHAR" property="userId" />
    <result column="task_id" jdbcType="VARCHAR" property="taskId" />
    <result column="product_id" jdbcType="VARCHAR" property="productId" />
    <result column="task_line_id" jdbcType="VARCHAR" property="taskLineId" />
    <result column="task_line_order" jdbcType="VARCHAR" property="lineOrder" />
    <result column="pay_status" jdbcType="INTEGER" property="payStatus" />
    <result column="pay_amount" jdbcType="DECIMAL" property="payAmount" />
    <result column="pay_time" jdbcType="TIMESTAMP" property="payTime" />
    <result column="status" jdbcType="INTEGER" property="lineStatus" />
    <result column="create_time" jdbcType="TIMESTAMP" property="createTime" />
    <result column="update_time" jdbcType="TIMESTAMP" property="updateTime" />
    <result column="sumCount" jdbcType="INTEGER" property="sumCount" />
  </resultMap>
  <sql id="Base_Column_List">
    <!--
      WARNING - @mbg.generated
      This element is automatically generated by MyBatis Generator, do not modify.
    -->
    id, user_id, task_id, product_id, task_line_id, pay_status, pay_amount, pay_time, 
    status, create_time, update_time
  </sql>
  <select id="selectByPrimaryKey" parameterType="java.lang.String" resultMap="BaseResultMap">
    <!--
      WARNING - @mbg.generated
      This element is automatically generated by MyBatis Generator, do not modify.
    -->
    select 
    <include refid="Base_Column_List" />
    from s_user_task_line
    where id = #{id,jdbcType=VARCHAR}
  </select>
  <delete id="deleteByPrimaryKey" parameterType="java.lang.String">
    <!--
      WARNING - @mbg.generated
      This element is automatically generated by MyBatis Generator, do not modify.
    -->
    delete from s_user_task_line
    where id = #{id,jdbcType=VARCHAR}
  </delete>
  <insert id="insert" parameterType="com.tian.sakura.cdd.db.domain.userTaskLine.UserTaskLine">
    <!--
      WARNING - @mbg.generated
      This element is automatically generated by MyBatis Generator, do not modify.
    -->
    insert into s_user_task_line (id, user_id, task_id, 
      product_id, task_line_id, pay_status, 
      pay_amount, pay_time, status, 
      create_time, update_time)
    values (#{id,jdbcType=VARCHAR}, #{userId,jdbcType=VARCHAR}, #{taskId,jdbcType=VARCHAR}, 
      #{productId,jdbcType=VARCHAR}, #{taskLineId,jdbcType=VARCHAR}, #{payStatus,jdbcType=INTEGER}, 
      #{payAmount,jdbcType=DECIMAL}, #{payTime,jdbcType=TIMESTAMP}, #{lineStatus,jdbcType=INTEGER},
      #{createTime,jdbcType=TIMESTAMP}, #{updateTime,jdbcType=TIMESTAMP})
  </insert>
  <insert id="insertSelective" parameterType="com.tian.sakura.cdd.db.domain.userTaskLine.UserTaskLine">
    <!--
      WARNING - @mbg.generated
      This element is automatically generated by MyBatis Generator, do not modify.
    -->
    insert into s_user_task_line
    <trim prefix="(" suffix=")" suffixOverrides=",">
      <if test="id != null">
        id,
      </if>
      <if test="userId != null">
        user_id,
      </if>
      <if test="taskId != null">
        task_id,
      </if>
      <if test="productId != null">
        product_id,
      </if>
      <if test="taskLineId != null">
        task_line_id,
      </if>
      <if test="payStatus != null">
        pay_status,
      </if>
      <if test="payAmount != null">
        pay_amount,
      </if>
      <if test="payTime != null">
        pay_time,
      </if>
      <if test="lineStatus != null">
        status,
      </if>
      <if test="createTime != null">
        create_time,
      </if>
      <if test="updateTime != null">
        update_time,
      </if>
    </trim>
    <trim prefix="values (" suffix=")" suffixOverrides=",">
      <if test="id != null">
        #{id,jdbcType=VARCHAR},
      </if>
      <if test="userId != null">
        #{userId,jdbcType=VARCHAR},
      </if>
      <if test="taskId != null">
        #{taskId,jdbcType=VARCHAR},
      </if>
      <if test="productId != null">
        #{productId,jdbcType=VARCHAR},
      </if>
      <if test="taskLineId != null">
        #{taskLineId,jdbcType=VARCHAR},
      </if>
      <if test="payStatus != null">
        #{payStatus,jdbcType=INTEGER},
      </if>
      <if test="payAmount != null">
        #{payAmount,jdbcType=DECIMAL},
      </if>
      <if test="payTime != null">
        #{payTime,jdbcType=TIMESTAMP},
      </if>
      <if test="lineStatus != null">
        #{lineStatus,jdbcType=INTEGER},
      </if>
      <if test="createTime != null">
        #{createTime,jdbcType=TIMESTAMP},
      </if>
      <if test="updateTime != null">
        #{updateTime,jdbcType=TIMESTAMP},
      </if>
    </trim>
  </insert>
  <update id="updateByPrimaryKeySelective" parameterType="com.tian.sakura.cdd.db.domain.userTaskLine.UserTaskLine">
    <!--
      WARNING - @mbg.generated
      This element is automatically generated by MyBatis Generator, do not modify.
    -->
    update s_user_task_line
    <set>
      <if test="userId != null">
        user_id = #{userId,jdbcType=VARCHAR},
      </if>
      <if test="taskId != null">
        task_id = #{taskId,jdbcType=VARCHAR},
      </if>
      <if test="productId != null">
        product_id = #{productId,jdbcType=VARCHAR},
      </if>
      <if test="taskLineId != null">
        task_line_id = #{taskLineId,jdbcType=VARCHAR},
      </if>
      <if test="payStatus != null">
        pay_status = #{payStatus,jdbcType=INTEGER},
      </if>
      <if test="payAmount != null">
        pay_amount = #{payAmount,jdbcType=DECIMAL},
      </if>
      <if test="payTime != null">
        pay_time = #{payTime,jdbcType=TIMESTAMP},
      </if>
      <if test="lineStatus != null">
        status = #{lineStatus,jdbcType=INTEGER},
      </if>
      <if test="createTime != null">
        create_time = #{createTime,jdbcType=TIMESTAMP},
      </if>
      <if test="updateTime != null">
        update_time = #{updateTime,jdbcType=TIMESTAMP},
      </if>
    </set>
    where id = #{id,jdbcType=VARCHAR}
  </update>
  <update id="updateByPrimaryKey" parameterType="com.tian.sakura.cdd.db.domain.userTaskLine.UserTaskLine">
    <!--
      WARNING - @mbg.generated
      This element is automatically generated by MyBatis Generator, do not modify.
    -->
    update s_user_task_line
    set user_id = #{userId,jdbcType=VARCHAR},
      task_id = #{taskId,jdbcType=VARCHAR},
      product_id = #{productId,jdbcType=VARCHAR},
      task_line_id = #{taskLineId,jdbcType=VARCHAR},
      pay_status = #{payStatus,jdbcType=INTEGER},
      pay_amount = #{payAmount,jdbcType=DECIMAL},
      pay_time = #{payTime,jdbcType=TIMESTAMP},
      status = #{lineStatus,jdbcType=INTEGER},
      create_time = #{createTime,jdbcType=TIMESTAMP},
      update_time = #{updateTime,jdbcType=TIMESTAMP}
    where id = #{id,jdbcType=VARCHAR}
  </update>

  <insert id="batchInsert" parameterType="java.util.List">
    insert into s_user_task_line
     (id, user_id, task_id,
      product_id, task_line_id, pay_status,
      pay_amount, pay_time, status,
      create_time, update_time)
    values
    <foreach collection="list" item="item" separator="," >
      (#{item.id,jdbcType=VARCHAR}, #{item.userId,jdbcType=VARCHAR}, #{item.taskId,jdbcType=VARCHAR},
      #{item.productId,jdbcType=VARCHAR}, #{item.taskLineId,jdbcType=VARCHAR}, #{item.payStatus,jdbcType=INTEGER},
      #{item.payAmount,jdbcType=DECIMAL}, #{item.payTime,jdbcType=TIMESTAMP}, #{item.lineStatus,jdbcType=INTEGER},
      #{item.createTime,jdbcType=TIMESTAMP}, #{item.updateTime,jdbcType=TIMESTAMP})
    </foreach>
  </insert>

  <!-- 任务线的总人数 -->
  <select id="userCount" parameterType="string" resultType="java.lang.Integer">
      select count(DISTINCT user_id)
      from s_user_task_line
      where product_id=#{productId}
      and pay_status = 1
  </select>

  <!-- 分配任务线 已支付，进行中的，未满的 -->
  <select id="selectForDispatch" resultMap="BaseResultMap">
    select  a.id, a.user_id, a.task_id, a.product_id, a.task_line_id,
            a.pay_status,
            a.pay_amount,
            a.pay_time,
            a.status, a.create_time, a.update_time,
            b.line_order

    from s_user_task_line a , s_task_line b
    where a.task_line_id = b.id
    and a.user_id=#{userId}
    and  a.product_id = #{productId}
    and a.status = 0
    and a.pay_status = 1
    and b.line_status = 0
    and b.settle_status = 0
    order by b.line_order
  </select>

  <select id="selectCntByUserIdGroupByPrdId" resultMap="BaseResultMap" parameterType="string">
     select product_id, status ,count(product_id) sumCount
     from s_user_task_line
     where user_id=#{userId}
         and pay_status =1
     group by product_id, status
  </select>


  <!-- 00 已接任务  1 转让中 2 转让成功 3 佣金计算中 4 佣金结算完成待入账  5 佣金已入账 -->
    <!-- 根据用户id 查总任务线数量  -->
    <select id="totalTaskLineByUserIdPrd" parameterType="string" resultType="java.lang.Integer">
      select count(1)
      from s_user_task_line
      where user_id=#{userId}
         and product_id = #{productId}
         and (status = 0 or status =1 or status =3 or status = 4 )
         and pay_status =1
  </select>
    <select id="totalTaskLineByUserId" parameterType="string" resultType="java.lang.Integer">
      select count(1)
      from s_user_task_line
      where user_id=#{userId}
         and (status = 0 or status =1 or status =3 or status = 4 )
         and pay_status =1
  </select>


    <!-- 根据用户id 查总任务线数量  -->
    <select id="totalTaskLineingByUserId" parameterType="string" resultType="java.lang.Integer">
      select count(1)
      from s_user_task_line
      where user_id=#{userId}
         and (status = 0 or status =1 )
  </select>
  
  <!-- 返回用户正在进行中的任务线个数  分页  -->
  <select id="qryTaskLineByUserId" parameterType="com.tian.sakura.cdd.db.manage.mytask.vo.MyTaskQueryVo"  
       resultType="java.util.HashMap">
	select product_id as productId,count(1) as taskLineTotal
	from s_user_task_line
	where (status =0 or status =1 )
   		and pay_status = 1
   		and user_id = #{userId}
	group by product_id
  </select>
  
   <!-- 返回用户正在进行中的任务线个数  不分页  -->
  <select id="qryTaskLine" parameterType="string"  
       resultType="java.util.HashMap">
	select product_id as productId,count(1) as taskLineTotal
	from s_user_task_line
	where (status =0 or status =1 )
   		and pay_status = 1
   		and user_id = #{userId}
	group by product_id
  </select>
  
  <!-- 根据task_line_id查询   -->
  <select id="qryByTaskLineId"  parameterType="string"  resultMap="BaseResultMap">
	select * 
	from s_user_task_line 
	where task_line_id = #{taskLineId}
		and (status = 0 or status=1)
	order by create_time
  </select>
    <!-- 根据用户id查结算中的任务线数量  -->
    <select id="totalTaskSettleByUserId" parameterType="string" resultType="java.lang.Integer">
      select count(distinct b.id)
      from s_user_task_line a,
           s_task_line b
      where a.user_id=#{userId}
         and a.task_line_id = b.id
         and b.settle_status = '1' 
  </select>
  
 <!-- 根据user_id查询进行中的任务线   -->
  <select id="getTaskLine"  parameterType="string"  resultMap="BaseResultMap">
	select * 
	from s_user_task_line a
	where
        user_id = #{userId}
		and (status = 0 or status=1)
		and pay_status = 1
		and product_id = #{productId}

	order by create_time asc
  </select>
  
    <!-- 返回用户正在结算中的任务线个数  分页  -->
  <select id="qrySettleTaskByPage" parameterType="com.tian.sakura.cdd.db.manage.mytask.vo.MyTaskQueryVo"  
       resultType="java.util.HashMap">
	select a.product_id as productId,count(1) as taskLineTotal
	from s_user_task_line a,
	     s_task_line b
	where a.user_id = #{userId}
   		and a.task_line_id = b.id
   		and b.settle_status = 1
	group by a.product_id
  </select>

    <!-- 返回用户正在结算中的任务线个数  不分页  -->
  <select id="qrySettleTaskByUserId" parameterType="string"  
       resultType="java.util.HashMap">
	select a.product_id as productId,count(1) as taskLineTotal
	from s_user_task_line a,
	     s_task_line b
	where a.user_id = #{userId}
   		and a.task_line_id = b.id
   		and b.settle_status = 1
	group by a.product_id
  </select>

  <select id="selectByTaskId" parameterType="string" resultMap="BaseResultMap">
    select
    <include refid="Base_Column_List" />
    from s_user_task_line
    where task_id = #{taskId,jdbcType=VARCHAR}
  </select>


  <update id="lockTaskByIds" parameterType="java.util.List">
      update s_task_line set lock_task = lock_task + 1
      where id in
       <foreach collection="list" open="(" close=")" separator="," item="item">
            #{item}
       </foreach>
  </update>

  <update id="cancelLockTaskByIds">
    update s_task_line set lock_task = lock_task - 1
    where id in
    <foreach collection="list" open="(" close=")" separator="," item="item">
      #{item}
    </foreach>
  </update>

  <update id="unLockTaskByIds">
      update s_task_line set lock_task = lock_task - 1, received_task = received_task + 1
      where id in
      <foreach collection="list" open="(" close=")" separator="," item="item">
        #{item}
      </foreach>
  </update>

  <update id="batchUpdateByTaskId" parameterType="com.tian.sakura.cdd.db.domain.userTaskLine.UserTaskLine">
      update s_user_task_line
       set  pay_status = #{payStatus,jdbcType=INTEGER},
      pay_time = #{payTime,jdbcType=TIMESTAMP},
      update_time = #{updateTime,jdbcType=TIMESTAMP}
       where
     task_id = #{taskId,jdbcType=VARCHAR}
  </update>
</mapper>